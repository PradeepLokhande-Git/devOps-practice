version: 0.2

phases:
  install: # Install AWS cli, kubectl (needed for Helm) and Helm
    commands:
       - apt install -y git python3
       - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
       - chmod +x ./aws-iam-authenticator
       - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
       - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
       - chmod +x kubectl
       - mv ./kubectl /usr/local/bin/kubectl
       - curl -o helm.tar.gz  https://get.helm.sh/helm-v3.10.2-linux-amd64.tar.gz
       - tar -xf helm.tar.gz
       - cp linux-amd64/helm /usr/local/bin/helm

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      #- "mkdir ~/.kube/"
      #- aws sts get-caller-identity
      #- aws eks --region us-east-1 update-kubeconfig --name eks-demo-cluster
      #- kubectl get nodes
      #- kubectl get pods
      
      # Set ROLE value
      #- ROLE="    - rolearn: arn:aws:iam::211125766521:role/iam-role-terraform\n      username: codebuild-project-service-role\n      groups:\n        - system:masters"
      # Get current aws-auth configMap data and attach new role info to it
      #- kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml      
      # Patch the aws-auth configmap with new role
      #- kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"
      # Verify what is updated in aws-auth configmap after change
      #- kubectl get configmap aws-auth -o yaml -n kube-system

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...  

      - docker build -f docker-simple-webpage/Dockerfile -t $REPOSITORY_URI/$IMAGE_REPO_NAME:latest .
      - docker build --no-cache -f src/frontend/Dockerfile -t $REPOSITORY_URI/$IMAGE_REPO_NAME:latest .
      - docker tag $REPOSITORY_URI/$IMAGE_REPO_NAME:latest $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG   
      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker pull $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
      #- helm install first-helm-realse docker-simple-webpage/test-chart
